(function () { 

    // load modules {{{
    var fs = require('fs'),
        populateTemplate = require('./theosp-nodejs-template-engine/template_engine').populateTemplate,
        theosp = require("./theosp_common_js/theosp");
    // }}}

    // options {{{
    var options = {
        conf_file: 'project.conf',
        project_path: undefined
    };
    // }}}

    // variables {{{

        // templates files {{{
    var templates = {

            // standard {{{
            standard: {
                "./api-generator-templates/standard/api.py":
                    "apis/{{ underscored_entity_name }}.py",
                "./api-generator-templates/standard/api.js":
                    "javascript/src/apis/{{ underscored_entity_name }}.js",
                "./api-generator-templates/standard/admin_frontend_section.js":
                    "javascript/src/frontends/admin/{{ underscored_pluralized_entity_name }}_section.js",
                "./api-generator-templates/standard/admin_frontend_editor.js":
                    "javascript/src/frontends/admin/{{ underscored_pluralized_entity_name }}_editor.js",
                "./api-generator-templates/standard/model.py":
                    "apis/models/{{ underscored_entity_name }}.py"
            },
            // }}}

            // file_system {{{
            file_system: {
                "./api-generator-templates/file_system/api.py":
                    "apis/{{ underscored_entity_name }}.py",
                "./api-generator-templates/file_system/api.js":
                    "javascript/src/apis/{{ underscored_entity_name }}.js",
                "./api-generator-templates/file_system/admin_frontend_section.js":
                    "javascript/src/frontends/admin/{{ underscored_pluralized_entity_name }}_section.js",
                "./api-generator-templates/file_system/admin_frontend_uploader.js":
                    "javascript/src/frontends/admin/{{ underscored_pluralized_entity_name }}_uploader.js",
                "./api-generator-templates/file_system/model.py":
                    "apis/models/{{ underscored_entity_name }}.py"
            }
            // }}}

        },
        // }}}

        // validations {{{
        valid_admin_editor_dom_element = {input: undefined, textarea: undefined},
        // }}}

        // defaults {{{
        default_admin_editor_dom_element = "input",
        default_admin_editor_css_class = "",
        default_admin_section_show_created_by_column = true,
        default_admin_section_show_modified_by_column = true,
        default_api_type = "standard",
        default_allow_guests_to_get_entity = false,
        default_allow_guests_to_list_entities = false,
        default_allow_guests_to_create_entities = false,
        default_allow_guests_to_edit_entities = false;
        default_show_images_preview = true;
        default_mime_types_restriced = false;
        // }}}
    
    // }}}

    // actions {{{
    var actions = {

        // help {{{
        help: function () {
            process.stdout.write([
                "NAME",
                "    theosp-gae-api-generator - Genrate a new api for Google App Engine application along with its admin interfaces",
                "    ",
                "    SYNOPSIS",
                "        node theosp-gae-api-generator [--conf=<theosp-gae-api-generator-conf-file>] [--project-path=<appengine-project-path>] install [<api-key>]",
                "        node theosp-gae-api-generator [-h] [--help]",
                "   ",
                "    OPTIONS",
                "        --conf=<theosp-gae-api-generator-conf-file>",
                "            If specified will be used instead of the default project.conf",
                "",
                "        --project-path=<appengine-project-path>",
                "            If specified will be used instead of the project object's project_path property which available in the conf file",
                "",
                "    COMMANDS",
                "        install",
                "            install all the apis defined in the config file unless specific <api-key> is given.",
                ""
            ].join("\n"));
        },
        // }}}

        // install {{{
        install: function (api_to_install) {
            var apis;

            // if the specific api picked
            if (typeof api_to_install !== 'undefined') {
                apis = [project.apis[api_to_install]];
            } else {
                apis = project.apis; // install all by default
            }

            for (var api_key in apis) {
                if (apis.hasOwnProperty(api_key)) {
                    var api = apis[api_key];

                    // set api options defaults {{{

                    // api.type {{{
                    if (typeof api.type === 'undefined') {
                        api.type = default_api_type;
                    }
                    // }}}

                    // api.admin_section_show_created_by_column {{{
                    if (typeof api.admin_section_show_created_by_column === 'undefined') {
                        api.admin_section_show_created_by_column = default_admin_section_show_created_by_column;
                    }
                    // }}}

                    // api.admin_section_show_modified_by_column {{{
                    if (typeof api.admin_section_show_modified_by_column === 'undefined') {
                        api.admin_section_show_modified_by_column = default_admin_section_show_modified_by_column;
                    }
                    // }}}

                    // api.allow_guests_to_get_entity {{{
                    if (typeof api.allow_guests_to_get_entity === 'undefined') {
                        api.allow_guests_to_get_entity = default_allow_guests_to_get_entity;
                    }
                    // }}}

                    // api.allow_guests_to_list_entities {{{
                    if (typeof api.allow_guests_to_list_entities === 'undefined') {
                        api.allow_guests_to_list_entities = default_allow_guests_to_list_entities;
                    }
                    // }}}

                    // api.allow_guests_to_create_entities {{{
                    if (typeof api.allow_guests_to_create_entities === 'undefined') {
                        api.allow_guests_to_create_entities = default_allow_guests_to_create_entities;
                    }
                    // }}}

                    // api.allow_guests_to_edit_entities {{{
                    if (typeof api.allow_guests_to_edit_entities === 'undefined') {
                        api.allow_guests_to_edit_entities = default_allow_guests_to_edit_entities;
                    }
                    // }}}

                    // api.show_images_preview {{{
                    if (typeof api.show_images_preview === 'undefined') {
                        api.show_images_preview = default_show_images_preview;
                    }
                    // }}}

                    // api.mime_types_restriced {{{
                    if (typeof api.mime_types_restriced === 'undefined') {
                        api.mime_types_restriced = default_mime_types_restriced;
                    }
                    // }}}

                    // }}}

                    (function (api) {
                        // init api.some_properties_need_special_treatment_after_json_decode {{{
                        api.some_properties_need_special_treatment_after_json_decode = false;
                        // }}}

                        // api's extended_properties {{{
                        var extended_properties = [];

                        for (var i = 0; i < api.properties.length; i++) {
                            var property = api.properties[i];

                            // initiate extended_property {{{
                            var extended_property = 
                                    theosp.object.extend({}, property, 
                                        {
                                         // admin_editor_css_class {{{
                                         admin_editor_css_class:
                                            (typeof property.admin_editor_css_class !== "undefined") ?
                                                property.admin_editor_css_class :
                                                default_admin_editor_css_class,
                                         // }}}

                                         // readable_capitalized_name {{{
                                         readable_capitalized_name: property.readable_name,
                                         // }}}
                                         
                                         // readable_noncapitalized_name {{{
                                         readable_noncapitalized_name: property.readable_name.toLowerCase(),
                                         // }}}
                                         
                                         // underscored_name {{{
                                         underscored_name: property.readable_name.toLowerCase().replace(/ /g, '_'),
                                         // }}}
                                         
                                         // camelcased_name {{{
                                         camelcased_name: property.readable_name.replace(/ /g, ''),
                                         // }}}
                                         
                                         // lower_camelcased_pluralized_name {{{
                                         lower_camelcased_name: function () {
                                             var s = property.readable_name.replace(/ /g, '');

                                             return s.charAt(0).toLowerCase() + s.substr(1);
                                         }
                                         // }}}

                                        }
                                    );

                            var exec_result_object = null;
                            // trivial_js_conversion_tofrom_string, is_list {{{
                            if ((exec_result_object = /^db.ListProperty\(([^)]+)\)/.exec(extended_property.model_definition)) !== null) {
                                extended_property.is_list = true;
                                extended_property.python_items_types = exec_result_object[1];

                                extended_property.trivial_js_conversion_tofrom_string = false;

                                extended_property.trivial_conversion_of_list_items_types_python = false;

                                api.some_properties_need_special_treatment_after_json_decode = true;
                            } else {
                                extended_property.is_list = false;

                                extended_property.trivial_js_conversion_tofrom_string = true;

                                extended_property.trivial_conversion_of_list_items_types_python = true;
                            }
                            // }}}

                            // }}}

                            // set admin_editor_dom_element to its default if undefined or has invalid value {{{
                            if (typeof extended_property.admin_editor_dom_element === 'undefined' || !(extended_property.admin_editor_dom_element in valid_admin_editor_dom_element)) {
                                extended_property.admin_editor_dom_element = default_admin_editor_dom_element;
                            }
                            // }}}

                            // add properties that enables checking for the admin_editor_dom_element state from within the template {{{

                            // first set all to false
                            for (var dom_element in valid_admin_editor_dom_element) {
                                if (valid_admin_editor_dom_element.hasOwnProperty(dom_element)) {
                                    extended_property['admin_editor_dom_element_' + dom_element] = false;
                                }
                            }

                            extended_property['admin_editor_dom_element_' + extended_property.admin_editor_dom_element] = true;
                            // }}}

                            extended_properties.push(extended_property);
                        }
                        // }}}

                        // generate api's templates components {{{
                        var templates_components = {

                            // Tags {{{
                            tags: {

                                // project_domain {{{
                                project_domain: project.domain,
                                // }}}

                                // readable_capitalized_entity_name: {{{
                                readable_capitalized_entity_name: api.entity_name,
                                // }}}

                                // readable_capitalized_pluralized_entity_name {{{
                                readable_capitalized_pluralized_entity_name: api.pluralized_entity_name,
                                // }}}

                                // readable_noncapitalized_entity_name {{{
                                readable_noncapitalized_entity_name: api.entity_name.toLowerCase(),
                                // }}}

                                // readable_noncapitalized_pluralized_entity_name {{{
                                readable_noncapitalized_pluralized_entity_name: api.pluralized_entity_name.toLowerCase(),
                                // }}}

                                // underscored_entity_name {{{
                                underscored_entity_name: api.entity_name.toLowerCase().replace(/ /g, '_'),
                                // }}}

                                // underscored_pluralized_entity_name {{{
                                underscored_pluralized_entity_name: api.pluralized_entity_name.toLowerCase().replace(/ /g, '_'),
                                // }}}

                                // camelcased_entity_name {{{
                                camelcased_entity_name: api.entity_name.replace(/ /g, ''),
                                // }}}

                                // camelcased_pluralized_entity_name {{{
                                camelcased_pluralized_entity_name: api.pluralized_entity_name.replace(/ /g, ''),
                                // }}}

                                // lower_camelcased_pluralized_entity_name {{{
                                lower_camelcased_pluralized_entity_name: function () {
                                    var s = api.pluralized_entity_name.replace(/ /g, '');

                                    return s.charAt(0).toLowerCase() + s.substr(1);
                                },
                                // }}}

                                // admin_section_table_cols_count {{{
                                admin_section_table_cols_count: function () {
                                    if (api.type === "file_system") {
                                        // If images preview
                                        if (typeof api.images_preview !== 'undefined' && api.images_preview === true) {
                                            return 7;
                                        }

                                        return 6;
                                    } else if (api.type === "standard") {
                                        // Created, Modified always present
                                        var cols = 2;

                                        cols += templates_components.iterators.admin_frontend_section_table_properties.length;

                                        if (api.admin_section_show_created_by_column === true) {
                                            cols += 1;
                                        }

                                        if (api.admin_section_show_modified_by_column === true) {
                                            cols += 1;
                                        }

                                        return cols;
                                    }
                                }
                                // }}}
                            },
                            // }}}

                            // Conditional sections {{{
                            conditional_sections: {

                                // show_images_preview {{{
                                show_images_preview: api.images_preview,
                                // }}}
                                
                                // mime_types_restriced {{{
                                mime_types_restriced: api.mime_types_restriced,
                                // }}}

                                // admin_section_show_created_by_column {{{
                                admin_section_show_created_by_column: api.admin_section_show_created_by_column,
                                // }}}

                                // admin_section_show_modified_by_column {{{
                                admin_section_show_modified_by_column: api.admin_section_show_modified_by_column,
                                // }}}

                                // allow_guests_to_get_entity {{{
                                allow_guests_to_get_entity: api.allow_guests_to_get_entity,
                                // }}}

                                // allow_guests_to_list_entities {{{
                                allow_guests_to_list_entities: api.allow_guests_to_list_entities,
                                // }}}

                                // allow_guests_to_create_entities {{{
                                allow_guests_to_create_entities: api.allow_guests_to_create_entities,
                                // }}}

                                // allow_guests_to_edit_entities {{{
                                allow_guests_to_edit_entities: api.allow_guests_to_edit_entities,
                                // }}}

                                // some_properties_need_special_treatment_after_json_decode {{{
                                some_properties_need_special_treatment_after_json_decode: api.some_properties_need_special_treatment_after_json_decode
                                // }}}
                            },
                            // }}}

                            // iterators {{{
                            iterators: {
                                // allowed_mime_types {{{
                                allowed_mime_types: (typeof api.allowed_mime_types !== "undefined") ? api.allowed_mime_types : [],
                                // }}}

                                // properties {{{
                                properties: extended_properties,
                                // }}}
                                
                                // admin_frontend_section_table_properties {{{
                                admin_frontend_section_table_properties: (function () {
                                    var iterator = [];

                                    for (var i = 0; i < extended_properties.length; i++) {
                                        var property = extended_properties[i];

                                        if (typeof property.show_on_admin_frontend_section_table !== 'undefined' && property.show_on_admin_frontend_section_table === true) {
                                            iterator.push(property);
                                        }
                                    }

                                    return iterator;
                                })()
                                // }}}
                            }
                            // }}}
                            
                        };
                        // }}}

                        // copy templates files to their path in the project {{{
                        for (var template_path in templates[api.type]) {
                            if (templates[api.type].hasOwnProperty(template_path)) {
                                var output_path = options.project_path + '/' +
                                        populateTemplate(templates[api.type][template_path], templates_components),
                                    read_stream = fs.createReadStream(template_path, {encoding: 'utf8'}),
                                    write_stream = fs.createWriteStream(output_path);

                                // without a the anon func the callback for
                                // write_stream.once might hold the next for loop
                                // iteration read/write_streams
                                (function (read_stream, write_stream) {
                                    var template = '';
                                    read_stream
                                        .on('data', function (data) {
                                            template += data;
                                        })
                                        .on('end', function () {
                                            write_stream.write(
                                                populateTemplate(template, templates_components));
                                        });
                                })(read_stream, write_stream);
                            }
                        }
                        // }}}

                        // generate tasks {{{
                        var read_stream = fs.createReadStream('./api-generator-templates/' + api.type + '/tasks.txt', {encoding: 'utf8'}),
                            tasks = '';

                        read_stream
                            .on('data', function (data) {
                                tasks += data;
                            })
                            .on('end', function () {
                                console.log(populateTemplate(tasks, templates_components));
                            });
                        // }}}

                    })(api);
                }
            }
        }
        // }}}

    };
    // }}}

    // getOpts {{{
    var getOpts = function (argv) {
            argv = argv.slice(2); // remove the call for node and the script name

            var action,
                action_args = [];

            // options {{{
            for (var i = 0; i < argv.length; i++) {
                var arg = argv[i];
            
                if (/^--conf=.+/.test(arg)) {
                    options.conf_file = arg.replace('--conf=', "");
                } else if (/^--project-path=.+/.test(arg)) {
                    options.project_path = arg.replace('--project-path=', "");
                } else if (/^--/.test(arg)) {
                    console.log("Error: Unkown option: " + arg.replace(/\=.*/, '') + "\n");
                    actions.help();

                    process.exit();
                } else {
                    // remove the options arguments from argv and exit
                    argv = argv.slice(i); 
                    break;
                }
            }
            // }}}

            // action {{{
            if (typeof argv[0] !== 'undefined') {
                action = argv[0];

                if (!(action in actions)) {
                    console.log("Error: Unknown action " + action + "." + "\n");

                    action = "help";
                }
            } else {
                console.log("Error: No action found" + "\n");

                action = "help";
            }
            // }}}

            // action_args {{{
            action_args = argv.slice(1);
            // }}}

            return {action: action, args: action_args};
        };
    // }}}

    // main {{{
    var main = function () {
        var opts = getOpts(process.argv);

        // if action isn't help {{{
        if (opts.action !== "help") {
            // normalize conf_file option {{{
            if (options.conf_file.indexOf('/') === -1) {
                options.conf_file = './' + options.conf_file;
            }
            // }}}

            // load project conf {{{
            project = require(options.conf_file).project;
            // }}}

            // if project has project_path and the user didn't explicitly set project path using command line argument option {{{
            if (typeof project.project_path !== 'undefined' && typeof options.project_path === 'undefined') {
                options.project_path = project.project_path;
            }
            // }}}

            if (typeof options.project_path === 'undefined') {
                console.log("Error: you must set your project-path either in the conf file (project_path property)");
                console.log("or by passing it as a command line argument --project-path=<project-path>\n");

                // show help and exit
                actions.help();
                process.exit();
            }

            // normalize conf_file option {{{
            if (options.project_path.slice(-1) === "/") {
                options.project_path = options.project_path.slice(0, -1);
            }
            // }}}
        }
        // }}}

        actions[opts.action].apply(this, opts.args);
    };
    // }}}

    // if main {{{
    if (!module.parent) {
        main();
    }
    // }}}

})();

// vim:ft=javascript:fdm=marker:fmr={{{,}}}:
